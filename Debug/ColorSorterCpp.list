
ColorSorterCpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000430  08000430  00002050  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00002050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000434  08000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000438  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000050  08000488  00002050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08000488  000021ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eea  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000412  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00003380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000071  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191d7  00000000  00000000  000034a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010a9  00000000  00000000  0001c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ccde  00000000  00000000  0001d721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa3ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004a4  00000000  00000000  000aa444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000aa8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000050 	.word	0x20000050
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000408 	.word	0x08000408

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000054 	.word	0x20000054
 8000200:	08000408 	.word	0x08000408

08000204 <_ZN5ClockC1Ev>:
#include "Clock/Clock.hpp"

Clock::Clock()
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <_ZN5ClockC1Ev+0x24>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2200      	movs	r2, #0
 8000216:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub

}
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4618      	mov	r0, r3
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	08000428 	.word	0x08000428

0800022c <_ZN5ClockD1Ev>:
{
	// TODO Auto-generated constructor stub

}

Clock::~Clock()
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	4a04      	ldr	r2, [pc, #16]	@ (8000248 <_ZN5ClockD1Ev+0x1c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	08000428 	.word	0x08000428

0800024c <_ZN5ClockD0Ev>:
Clock::~Clock()
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
}
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f7ff ffe9 	bl	800022c <_ZN5ClockD1Ev>
 800025a:	2108      	movs	r1, #8
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 f84a 	bl	80002f6 <_ZdlPvj>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <main>:
#include <Clock/Clock.hpp>

int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	Clock clock;
 8000272:	463b      	mov	r3, r7
 8000274:	4618      	mov	r0, r3
 8000276:	f7ff ffc5 	bl	8000204 <_ZN5ClockC1Ev>
	while(true);
 800027a:	bf00      	nop
 800027c:	e7fd      	b.n	800027a <main+0xe>
	...

08000280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <SystemInit+0x20>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800028a:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <SystemInit+0x20>)
 800028c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	@ (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a8:	f7ff ffea 	bl	8000280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	@ (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	@ (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f829 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ffc9 	bl	800026c <main>

080002da <LoopForever>:

LoopForever:
  b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80002e8:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80002ec:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80002f0:	200001ac 	.word	0x200001ac

080002f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>

080002f6 <_ZdlPvj>:
 80002f6:	f000 b800 	b.w	80002fa <_ZdlPv>

080002fa <_ZdlPv>:
 80002fa:	f000 b801 	b.w	8000300 <free>
	...

08000300 <free>:
 8000300:	4b02      	ldr	r3, [pc, #8]	@ (800030c <free+0xc>)
 8000302:	4601      	mov	r1, r0
 8000304:	6818      	ldr	r0, [r3, #0]
 8000306:	f000 b835 	b.w	8000374 <_free_r>
 800030a:	bf00      	nop
 800030c:	20000000 	.word	0x20000000

08000310 <__malloc_lock>:
 8000310:	4801      	ldr	r0, [pc, #4]	@ (8000318 <__malloc_lock+0x8>)
 8000312:	f000 b82d 	b.w	8000370 <__retarget_lock_acquire_recursive>
 8000316:	bf00      	nop
 8000318:	200001a8 	.word	0x200001a8

0800031c <__malloc_unlock>:
 800031c:	4801      	ldr	r0, [pc, #4]	@ (8000324 <__malloc_unlock+0x8>)
 800031e:	f000 b828 	b.w	8000372 <__retarget_lock_release_recursive>
 8000322:	bf00      	nop
 8000324:	200001a8 	.word	0x200001a8

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	@ (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	@ (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	@ (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	@ (800036c <__libc_init_array+0x44>)
 800033c:	f000 f864 	bl	8000408 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000430 	.word	0x08000430
 8000364:	08000430 	.word	0x08000430
 8000368:	08000430 	.word	0x08000430
 800036c:	08000434 	.word	0x08000434

08000370 <__retarget_lock_acquire_recursive>:
 8000370:	4770      	bx	lr

08000372 <__retarget_lock_release_recursive>:
 8000372:	4770      	bx	lr

08000374 <_free_r>:
 8000374:	b538      	push	{r3, r4, r5, lr}
 8000376:	4605      	mov	r5, r0
 8000378:	2900      	cmp	r1, #0
 800037a:	d041      	beq.n	8000400 <_free_r+0x8c>
 800037c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000380:	1f0c      	subs	r4, r1, #4
 8000382:	2b00      	cmp	r3, #0
 8000384:	bfb8      	it	lt
 8000386:	18e4      	addlt	r4, r4, r3
 8000388:	f7ff ffc2 	bl	8000310 <__malloc_lock>
 800038c:	4a1d      	ldr	r2, [pc, #116]	@ (8000404 <_free_r+0x90>)
 800038e:	6813      	ldr	r3, [r2, #0]
 8000390:	b933      	cbnz	r3, 80003a0 <_free_r+0x2c>
 8000392:	6063      	str	r3, [r4, #4]
 8000394:	6014      	str	r4, [r2, #0]
 8000396:	4628      	mov	r0, r5
 8000398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800039c:	f7ff bfbe 	b.w	800031c <__malloc_unlock>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d908      	bls.n	80003b6 <_free_r+0x42>
 80003a4:	6820      	ldr	r0, [r4, #0]
 80003a6:	1821      	adds	r1, r4, r0
 80003a8:	428b      	cmp	r3, r1
 80003aa:	bf01      	itttt	eq
 80003ac:	6819      	ldreq	r1, [r3, #0]
 80003ae:	685b      	ldreq	r3, [r3, #4]
 80003b0:	1809      	addeq	r1, r1, r0
 80003b2:	6021      	streq	r1, [r4, #0]
 80003b4:	e7ed      	b.n	8000392 <_free_r+0x1e>
 80003b6:	461a      	mov	r2, r3
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	b10b      	cbz	r3, 80003c0 <_free_r+0x4c>
 80003bc:	42a3      	cmp	r3, r4
 80003be:	d9fa      	bls.n	80003b6 <_free_r+0x42>
 80003c0:	6811      	ldr	r1, [r2, #0]
 80003c2:	1850      	adds	r0, r2, r1
 80003c4:	42a0      	cmp	r0, r4
 80003c6:	d10b      	bne.n	80003e0 <_free_r+0x6c>
 80003c8:	6820      	ldr	r0, [r4, #0]
 80003ca:	4401      	add	r1, r0
 80003cc:	1850      	adds	r0, r2, r1
 80003ce:	4283      	cmp	r3, r0
 80003d0:	6011      	str	r1, [r2, #0]
 80003d2:	d1e0      	bne.n	8000396 <_free_r+0x22>
 80003d4:	6818      	ldr	r0, [r3, #0]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	6053      	str	r3, [r2, #4]
 80003da:	4408      	add	r0, r1
 80003dc:	6010      	str	r0, [r2, #0]
 80003de:	e7da      	b.n	8000396 <_free_r+0x22>
 80003e0:	d902      	bls.n	80003e8 <_free_r+0x74>
 80003e2:	230c      	movs	r3, #12
 80003e4:	602b      	str	r3, [r5, #0]
 80003e6:	e7d6      	b.n	8000396 <_free_r+0x22>
 80003e8:	6820      	ldr	r0, [r4, #0]
 80003ea:	1821      	adds	r1, r4, r0
 80003ec:	428b      	cmp	r3, r1
 80003ee:	bf04      	itt	eq
 80003f0:	6819      	ldreq	r1, [r3, #0]
 80003f2:	685b      	ldreq	r3, [r3, #4]
 80003f4:	6063      	str	r3, [r4, #4]
 80003f6:	bf04      	itt	eq
 80003f8:	1809      	addeq	r1, r1, r0
 80003fa:	6021      	streq	r1, [r4, #0]
 80003fc:	6054      	str	r4, [r2, #4]
 80003fe:	e7ca      	b.n	8000396 <_free_r+0x22>
 8000400:	bd38      	pop	{r3, r4, r5, pc}
 8000402:	bf00      	nop
 8000404:	2000006c 	.word	0x2000006c

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
